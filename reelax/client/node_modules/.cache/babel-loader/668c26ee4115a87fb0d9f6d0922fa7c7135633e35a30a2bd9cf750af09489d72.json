{"ast":null,"code":"/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\n// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)\n// Node has recently added whatwg stream into core\n\nimport './streams.cjs';\n\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536;\n\n/** @param {(Blob | Uint8Array)[]} parts */\nfunction toIterator(parts) {\n  try {\n    let clone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return async function* () {\n      for (const part of parts) {\n        if ('stream' in part) {\n          yield* /** @type {AsyncIterableIterator<Uint8Array>} */part.stream();\n        } else if (ArrayBuffer.isView(part)) {\n          if (clone) {\n            let position = part.byteOffset;\n            const end = part.byteOffset + part.byteLength;\n            while (position !== end) {\n              const size = Math.min(end - position, POOL_SIZE);\n              const chunk = part.buffer.slice(position, position + size);\n              position += chunk.byteLength;\n              yield new Uint8Array(chunk);\n            }\n          } else {\n            yield part;\n          }\n          /* c8 ignore next 10 */\n        } else {\n          // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n          let position = 0,\n            b = /** @type {Blob} */part;\n          while (position !== b.size) {\n            const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE));\n            const buffer = await chunk.arrayBuffer();\n            position += buffer.byteLength;\n            yield new Uint8Array(buffer);\n          }\n        }\n      }\n    }();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\nconst _Blob = class Blob {\n  /** @type {Array.<(Blob|Uint8Array)>} */\n  #parts = [];\n  #type = '';\n  #size = 0;\n  #endings = 'transparent';\n\n  /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */\n  constructor() {\n    let blobParts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof blobParts !== 'object' || blobParts === null) {\n      throw new TypeError('Failed to construct \\'Blob\\': The provided value cannot be converted to a sequence.');\n    }\n    if (typeof blobParts[Symbol.iterator] !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': The object must have a callable @@iterator property.');\n    }\n    if (typeof options !== 'object' && typeof options !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': parameter 2 cannot convert to dictionary.');\n    }\n    if (options === null) options = {};\n    const encoder = new TextEncoder();\n    for (const element of blobParts) {\n      let part;\n      if (ArrayBuffer.isView(element)) {\n        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));\n      } else if (element instanceof ArrayBuffer) {\n        part = new Uint8Array(element.slice(0));\n      } else if (element instanceof Blob) {\n        part = element;\n      } else {\n        part = encoder.encode(`${element}`);\n      }\n      this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size;\n      this.#parts.push(part);\n    }\n    this.#endings = `${options.endings === undefined ? 'transparent' : options.endings}`;\n    const type = options.type === undefined ? '' : String(options.type);\n    this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : '';\n  }\n\n  /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */\n  get size() {\n    return this.#size;\n  }\n\n  /**\n   * The type property of a Blob object returns the MIME type of the file.\n   */\n  get type() {\n    return this.#type;\n  }\n\n  /**\n   * The text() method in the Blob interface returns a Promise\n   * that resolves with a string containing the contents of\n   * the blob, interpreted as UTF-8.\n   *\n   * @return {Promise<string>}\n   */\n  async text() {\n    // More optimized than using this.arrayBuffer()\n    // that requires twice as much ram\n    const decoder = new TextDecoder();\n    let str = '';\n    for await (const part of toIterator(this.#parts, false)) {\n      str += decoder.decode(part, {\n        stream: true\n      });\n    }\n    // Remaining\n    str += decoder.decode();\n    return str;\n  }\n\n  /**\n   * The arrayBuffer() method in the Blob interface returns a\n   * Promise that resolves with the contents of the blob as\n   * binary data contained in an ArrayBuffer.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */\n  async arrayBuffer() {\n    // Easier way... Just a unnecessary overhead\n    // const view = new Uint8Array(this.size);\n    // await this.stream().getReader({mode: 'byob'}).read(view);\n    // return view.buffer;\n\n    const data = new Uint8Array(this.size);\n    let offset = 0;\n    for await (const chunk of toIterator(this.#parts, false)) {\n      data.set(chunk, offset);\n      offset += chunk.length;\n    }\n    return data.buffer;\n  }\n  stream() {\n    const it = toIterator(this.#parts, true);\n    return new globalThis.ReadableStream({\n      // @ts-ignore\n      type: 'bytes',\n      async pull(ctrl) {\n        const chunk = await it.next();\n        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);\n      },\n      async cancel() {\n        await it.return();\n      }\n    });\n  }\n\n  /**\n   * The Blob interface's slice() method creates and returns a\n   * new Blob object which contains data from a subset of the\n   * blob on which it's called.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [type]\n   */\n  slice() {\n    let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.size;\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    const {\n      size\n    } = this;\n    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);\n    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);\n    const span = Math.max(relativeEnd - relativeStart, 0);\n    const parts = this.#parts;\n    const blobParts = [];\n    let added = 0;\n    for (const part of parts) {\n      // don't add the overflow to new blobParts\n      if (added >= span) {\n        break;\n      }\n      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n      if (relativeStart && size <= relativeStart) {\n        // Skip the beginning and change the relative\n        // start & end position as we skip the unwanted parts\n        relativeStart -= size;\n        relativeEnd -= size;\n      } else {\n        let chunk;\n        if (ArrayBuffer.isView(part)) {\n          chunk = part.subarray(relativeStart, Math.min(size, relativeEnd));\n          added += chunk.byteLength;\n        } else {\n          chunk = part.slice(relativeStart, Math.min(size, relativeEnd));\n          added += chunk.size;\n        }\n        relativeEnd -= size;\n        blobParts.push(chunk);\n        relativeStart = 0; // All next sequential parts should start at 0\n      }\n    }\n\n    const blob = new Blob([], {\n      type: String(type).toLowerCase()\n    });\n    blob.#size = span;\n    blob.#parts = blobParts;\n    return blob;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Blob';\n  }\n  static [Symbol.hasInstance](object) {\n    return object && typeof object === 'object' && typeof object.constructor === 'function' && (typeof object.stream === 'function' || typeof object.arrayBuffer === 'function') && /^(Blob|File)$/.test(object[Symbol.toStringTag]);\n  }\n};\nObject.defineProperties(_Blob.prototype, {\n  size: {\n    enumerable: true\n  },\n  type: {\n    enumerable: true\n  },\n  slice: {\n    enumerable: true\n  }\n});\n\n/** @type {typeof globalThis.Blob} */\nexport const Blob = _Blob;\nexport default Blob;","map":{"version":3,"names":["POOL_SIZE","toIterator","parts","clone","arguments","length","undefined","part","stream","ArrayBuffer","isView","position","byteOffset","end","byteLength","size","Math","min","chunk","buffer","slice","Uint8Array","b","arrayBuffer","e","Promise","reject","_Blob","Blob","type","endings","constructor","blobParts","options","TypeError","Symbol","iterator","encoder","TextEncoder","element","encode","push","String","test","text","decoder","TextDecoder","str","decode","data","offset","set","it","globalThis","ReadableStream","pull","ctrl","next","done","close","enqueue","value","cancel","return","start","relativeStart","max","relativeEnd","span","added","subarray","blob","toLowerCase","toStringTag","hasInstance","object","Object","defineProperties","prototype","enumerable"],"sources":["/Users/ewang/Desktop/G36/codeclan_work/week_15/Capstone_Project_Reelax/reelax/node_modules/fetch-blob/index.js"],"sourcesContent":["/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\n// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)\n// Node has recently added whatwg stream into core\n\nimport './streams.cjs'\n\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\n/** @param {(Blob | Uint8Array)[]} parts */\nasync function * toIterator (parts, clone = true) {\n  for (const part of parts) {\n    if ('stream' in part) {\n      yield * (/** @type {AsyncIterableIterator<Uint8Array>} */ (part.stream()))\n    } else if (ArrayBuffer.isView(part)) {\n      if (clone) {\n        let position = part.byteOffset\n        const end = part.byteOffset + part.byteLength\n        while (position !== end) {\n          const size = Math.min(end - position, POOL_SIZE)\n          const chunk = part.buffer.slice(position, position + size)\n          position += chunk.byteLength\n          yield new Uint8Array(chunk)\n        }\n      } else {\n        yield part\n      }\n    /* c8 ignore next 10 */\n    } else {\n      // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n      let position = 0, b = (/** @type {Blob} */ (part))\n      while (position !== b.size) {\n        const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE))\n        const buffer = await chunk.arrayBuffer()\n        position += buffer.byteLength\n        yield new Uint8Array(buffer)\n      }\n    }\n  }\n}\n\nconst _Blob = class Blob {\n  /** @type {Array.<(Blob|Uint8Array)>} */\n  #parts = []\n  #type = ''\n  #size = 0\n  #endings = 'transparent'\n\n  /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */\n  constructor (blobParts = [], options = {}) {\n    if (typeof blobParts !== 'object' || blobParts === null) {\n      throw new TypeError('Failed to construct \\'Blob\\': The provided value cannot be converted to a sequence.')\n    }\n\n    if (typeof blobParts[Symbol.iterator] !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': The object must have a callable @@iterator property.')\n    }\n\n    if (typeof options !== 'object' && typeof options !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': parameter 2 cannot convert to dictionary.')\n    }\n\n    if (options === null) options = {}\n\n    const encoder = new TextEncoder()\n    for (const element of blobParts) {\n      let part\n      if (ArrayBuffer.isView(element)) {\n        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength))\n      } else if (element instanceof ArrayBuffer) {\n        part = new Uint8Array(element.slice(0))\n      } else if (element instanceof Blob) {\n        part = element\n      } else {\n        part = encoder.encode(`${element}`)\n      }\n\n      this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size\n      this.#parts.push(part)\n    }\n\n    this.#endings = `${options.endings === undefined ? 'transparent' : options.endings}`\n    const type = options.type === undefined ? '' : String(options.type)\n    this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : ''\n  }\n\n  /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */\n  get size () {\n    return this.#size\n  }\n\n  /**\n   * The type property of a Blob object returns the MIME type of the file.\n   */\n  get type () {\n    return this.#type\n  }\n\n  /**\n   * The text() method in the Blob interface returns a Promise\n   * that resolves with a string containing the contents of\n   * the blob, interpreted as UTF-8.\n   *\n   * @return {Promise<string>}\n   */\n  async text () {\n    // More optimized than using this.arrayBuffer()\n    // that requires twice as much ram\n    const decoder = new TextDecoder()\n    let str = ''\n    for await (const part of toIterator(this.#parts, false)) {\n      str += decoder.decode(part, { stream: true })\n    }\n    // Remaining\n    str += decoder.decode()\n    return str\n  }\n\n  /**\n   * The arrayBuffer() method in the Blob interface returns a\n   * Promise that resolves with the contents of the blob as\n   * binary data contained in an ArrayBuffer.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */\n  async arrayBuffer () {\n    // Easier way... Just a unnecessary overhead\n    // const view = new Uint8Array(this.size);\n    // await this.stream().getReader({mode: 'byob'}).read(view);\n    // return view.buffer;\n\n    const data = new Uint8Array(this.size)\n    let offset = 0\n    for await (const chunk of toIterator(this.#parts, false)) {\n      data.set(chunk, offset)\n      offset += chunk.length\n    }\n\n    return data.buffer\n  }\n\n  stream () {\n    const it = toIterator(this.#parts, true)\n\n    return new globalThis.ReadableStream({\n      // @ts-ignore\n      type: 'bytes',\n      async pull (ctrl) {\n        const chunk = await it.next()\n        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value)\n      },\n\n      async cancel () {\n        await it.return()\n      }\n    })\n  }\n\n  /**\n   * The Blob interface's slice() method creates and returns a\n   * new Blob object which contains data from a subset of the\n   * blob on which it's called.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [type]\n   */\n  slice (start = 0, end = this.size, type = '') {\n    const { size } = this\n\n    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size)\n    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size)\n\n    const span = Math.max(relativeEnd - relativeStart, 0)\n    const parts = this.#parts\n    const blobParts = []\n    let added = 0\n\n    for (const part of parts) {\n      // don't add the overflow to new blobParts\n      if (added >= span) {\n        break\n      }\n\n      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size\n      if (relativeStart && size <= relativeStart) {\n        // Skip the beginning and change the relative\n        // start & end position as we skip the unwanted parts\n        relativeStart -= size\n        relativeEnd -= size\n      } else {\n        let chunk\n        if (ArrayBuffer.isView(part)) {\n          chunk = part.subarray(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.byteLength\n        } else {\n          chunk = part.slice(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.size\n        }\n        relativeEnd -= size\n        blobParts.push(chunk)\n        relativeStart = 0 // All next sequential parts should start at 0\n      }\n    }\n\n    const blob = new Blob([], { type: String(type).toLowerCase() })\n    blob.#size = span\n    blob.#parts = blobParts\n\n    return blob\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return (\n      object &&\n      typeof object === 'object' &&\n      typeof object.constructor === 'function' &&\n      (\n        typeof object.stream === 'function' ||\n        typeof object.arrayBuffer === 'function'\n      ) &&\n      /^(Blob|File)$/.test(object[Symbol.toStringTag])\n    )\n  }\n}\n\nObject.defineProperties(_Blob.prototype, {\n  size: { enumerable: true },\n  type: { enumerable: true },\n  slice: { enumerable: true }\n})\n\n/** @type {typeof globalThis.Blob} */\nexport const Blob = _Blob\nexport default Blob\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}