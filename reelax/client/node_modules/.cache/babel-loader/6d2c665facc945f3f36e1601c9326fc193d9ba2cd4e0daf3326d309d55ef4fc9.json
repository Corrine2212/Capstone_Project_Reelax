{"ast":null,"code":"import { statSync, createReadStream, promises as fs } from 'node:fs';\nimport { basename } from 'node:path';\nimport DOMException from 'node-domexception';\nimport File from './file.js';\nimport Blob from './index.js';\nconst {\n  stat\n} = fs;\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst blobFromSync = (path, type) => fromBlob(statSync(path), path, type);\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */\nconst blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type));\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */\nconst fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type));\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst fileFromSync = (path, type) => fromFile(statSync(path), path, type);\n\n// @ts-ignore\nconst fromBlob = function (stat, path) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return new Blob([new BlobDataItem({\n    path,\n    size: stat.size,\n    lastModified: stat.mtimeMs,\n    start: 0\n  })], {\n    type\n  });\n};\n\n// @ts-ignore\nconst fromFile = function (stat, path) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return new File([new BlobDataItem({\n    path,\n    size: stat.size,\n    lastModified: stat.mtimeMs,\n    start: 0\n  })], basename(path), {\n    type,\n    lastModified: stat.mtimeMs\n  });\n};\n\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */\nclass BlobDataItem {\n  #path;\n  #start;\n  constructor(options) {\n    this.#path = options.path;\n    this.#start = options.start;\n    this.size = options.size;\n    this.lastModified = options.lastModified;\n  }\n\n  /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */\n  slice(start, end) {\n    return new BlobDataItem({\n      path: this.#path,\n      lastModified: this.lastModified,\n      size: end - start,\n      start: this.#start + start\n    });\n  }\n  async *stream() {\n    const {\n      mtimeMs\n    } = await stat(this.#path);\n    if (mtimeMs > this.lastModified) {\n      throw new DOMException('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError');\n    }\n    yield* createReadStream(this.#path, {\n      start: this.#start,\n      end: this.#start + this.size - 1\n    });\n  }\n  get [Symbol.toStringTag]() {\n    return 'Blob';\n  }\n}\nexport default blobFromSync;\nexport { File, Blob, blobFrom, blobFromSync, fileFrom, fileFromSync };","map":{"version":3,"names":["statSync","createReadStream","promises","fs","basename","DOMException","File","Blob","stat","blobFromSync","path","type","fromBlob","blobFrom","then","fileFrom","fromFile","fileFromSync","arguments","length","undefined","BlobDataItem","size","lastModified","mtimeMs","start","constructor","options","slice","end","stream","Symbol","toStringTag"],"sources":["/Users/ewang/Desktop/G36/codeclan_work/week_15/Capstone_Project_Reelax/reelax/node_modules/fetch-blob/from.js"],"sourcesContent":["import { statSync, createReadStream, promises as fs } from 'node:fs'\nimport { basename } from 'node:path'\nimport DOMException from 'node-domexception'\n\nimport File from './file.js'\nimport Blob from './index.js'\n\nconst { stat } = fs\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst blobFromSync = (path, type) => fromBlob(statSync(path), path, type)\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */\nconst blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */\nconst fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst fileFromSync = (path, type) => fromFile(statSync(path), path, type)\n\n// @ts-ignore\nconst fromBlob = (stat, path, type = '') => new Blob([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], { type })\n\n// @ts-ignore\nconst fromFile = (stat, path, type = '') => new File([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], basename(path), { type, lastModified: stat.mtimeMs })\n\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */\nclass BlobDataItem {\n  #path\n  #start\n\n  constructor (options) {\n    this.#path = options.path\n    this.#start = options.start\n    this.size = options.size\n    this.lastModified = options.lastModified\n  }\n\n  /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */\n  slice (start, end) {\n    return new BlobDataItem({\n      path: this.#path,\n      lastModified: this.lastModified,\n      size: end - start,\n      start: this.#start + start\n    })\n  }\n\n  async * stream () {\n    const { mtimeMs } = await stat(this.#path)\n    if (mtimeMs > this.lastModified) {\n      throw new DOMException('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError')\n    }\n    yield * createReadStream(this.#path, {\n      start: this.#start,\n      end: this.#start + this.size - 1\n    })\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n}\n\nexport default blobFromSync\nexport { File, Blob, blobFrom, blobFromSync, fileFrom, fileFromSync }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}