{"ast":null,"code":"/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport http from 'node:http';\nimport https from 'node:https';\nimport zlib from 'node:zlib';\nimport Stream, { PassThrough, pipeline as pump } from 'node:stream';\nimport { Buffer } from 'node:buffer';\nimport dataUriToBuffer from 'data-uri-to-buffer';\nimport { writeToStream, clone } from './body.js';\nimport Response from './response.js';\nimport Headers, { fromRawHeaders } from './headers.js';\nimport Request, { getNodeRequestOptions } from './request.js';\nimport { FetchError } from './errors/fetch-error.js';\nimport { AbortError } from './errors/abort-error.js';\nimport { isRedirect } from './utils/is-redirect.js';\nimport { FormData } from 'formdata-polyfill/esm.min.js';\nimport { isDomainOrSubdomain, isSameProtocol } from './utils/is.js';\nimport { parseReferrerPolicyFromHeader } from './utils/referrer.js';\nimport { Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom } from 'fetch-blob/from.js';\nexport { FormData, Headers, Request, Response, FetchError, AbortError, isRedirect };\nexport { Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom };\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nexport default async function fetch(url, options_) {\n  return new Promise((resolve, reject) => {\n    // Build request object\n    const request = new Request(url, options_);\n    const {\n      parsedURL,\n      options\n    } = getNodeRequestOptions(request);\n    if (!supportedSchemas.has(parsedURL.protocol)) {\n      throw new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, '')}\" is not supported.`);\n    }\n    if (parsedURL.protocol === 'data:') {\n      const data = dataUriToBuffer(request.url);\n      const response = new Response(data, {\n        headers: {\n          'Content-Type': data.typeFull\n        }\n      });\n      resolve(response);\n      return;\n    }\n\n    // Wrap http.request into fetch\n    const send = (parsedURL.protocol === 'https:' ? https : http).request;\n    const {\n      signal\n    } = request;\n    let response = null;\n    const abort = () => {\n      const error = new AbortError('The operation was aborted.');\n      reject(error);\n      if (request.body && request.body instanceof Stream.Readable) {\n        request.body.destroy(error);\n      }\n      if (!response || !response.body) {\n        return;\n      }\n      response.body.emit('error', error);\n    };\n    if (signal && signal.aborted) {\n      abort();\n      return;\n    }\n    const abortAndFinalize = () => {\n      abort();\n      finalize();\n    };\n\n    // Send request\n    const request_ = send(parsedURL.toString(), options);\n    if (signal) {\n      signal.addEventListener('abort', abortAndFinalize);\n    }\n    const finalize = () => {\n      request_.abort();\n      if (signal) {\n        signal.removeEventListener('abort', abortAndFinalize);\n      }\n    };\n    request_.on('error', error => {\n      reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n      finalize();\n    });\n    fixResponseChunkedTransferBadEnding(request_, error => {\n      if (response && response.body) {\n        response.body.destroy(error);\n      }\n    });\n\n    /* c8 ignore next 18 */\n    if (process.version < 'v14') {\n      // Before Node.js 14, pipeline() does not fully support async iterators and does not always\n      // properly handle when the socket close/end events are out of order.\n      request_.on('socket', s => {\n        let endedWithEventsCount;\n        s.prependListener('end', () => {\n          endedWithEventsCount = s._eventsCount;\n        });\n        s.prependListener('close', hadError => {\n          // if end happened before close but the socket didn't emit an error, do it now\n          if (response && endedWithEventsCount < s._eventsCount && !hadError) {\n            const error = new Error('Premature close');\n            error.code = 'ERR_STREAM_PREMATURE_CLOSE';\n            response.body.emit('error', error);\n          }\n        });\n      });\n    }\n    request_.on('response', response_ => {\n      request_.setTimeout(0);\n      const headers = fromRawHeaders(response_.rawHeaders);\n\n      // HTTP fetch step 5\n      if (isRedirect(response_.statusCode)) {\n        // HTTP fetch step 5.2\n        const location = headers.get('Location');\n\n        // HTTP fetch step 5.3\n        let locationURL = null;\n        try {\n          locationURL = location === null ? null : new URL(location, request.url);\n        } catch {\n          // error here can only be invalid URL in Location: header\n          // do not throw when options.redirect == manual\n          // let the user extract the errorneous redirect URL\n          if (request.redirect !== 'manual') {\n            reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n            finalize();\n            return;\n          }\n        }\n\n        // HTTP fetch step 5.5\n        switch (request.redirect) {\n          case 'error':\n            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n            finalize();\n            return;\n          case 'manual':\n            // Nothing to do\n            break;\n          case 'follow':\n            {\n              // HTTP-redirect fetch step 2\n              if (locationURL === null) {\n                break;\n              }\n\n              // HTTP-redirect fetch step 5\n              if (request.counter >= request.follow) {\n                reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n                finalize();\n                return;\n              }\n\n              // HTTP-redirect fetch step 6 (counter increment)\n              // Create a new Request object.\n              const requestOptions = {\n                headers: new Headers(request.headers),\n                follow: request.follow,\n                counter: request.counter + 1,\n                agent: request.agent,\n                compress: request.compress,\n                method: request.method,\n                body: clone(request),\n                signal: request.signal,\n                size: request.size,\n                referrer: request.referrer,\n                referrerPolicy: request.referrerPolicy\n              };\n\n              // when forwarding sensitive headers like \"Authorization\",\n              // \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n              // headers will be ignored when following a redirect to a domain\n              // that is not a subdomain match or exact match of the initial domain.\n              // For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n              // will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n              // headers will also be ignored when following a redirect to a domain using\n              // a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n              // will not forward the sensitive headers\n              if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n                for (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n                  requestOptions.headers.delete(name);\n                }\n              }\n\n              // HTTP-redirect fetch step 9\n              if (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n                reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n                finalize();\n                return;\n              }\n\n              // HTTP-redirect fetch step 11\n              if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST') {\n                requestOptions.method = 'GET';\n                requestOptions.body = undefined;\n                requestOptions.headers.delete('content-length');\n              }\n\n              // HTTP-redirect fetch step 14\n              const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n              if (responseReferrerPolicy) {\n                requestOptions.referrerPolicy = responseReferrerPolicy;\n              }\n\n              // HTTP-redirect fetch step 15\n              resolve(fetch(new Request(locationURL, requestOptions)));\n              finalize();\n              return;\n            }\n          default:\n            return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n        }\n      }\n\n      // Prepare response\n      if (signal) {\n        response_.once('end', () => {\n          signal.removeEventListener('abort', abortAndFinalize);\n        });\n      }\n      let body = pump(response_, new PassThrough(), error => {\n        if (error) {\n          reject(error);\n        }\n      });\n      // see https://github.com/nodejs/node/pull/29376\n      /* c8 ignore next 3 */\n      if (process.version < 'v12.10') {\n        response_.on('aborted', abortAndFinalize);\n      }\n      const responseOptions = {\n        url: request.url,\n        status: response_.statusCode,\n        statusText: response_.statusMessage,\n        headers,\n        size: request.size,\n        counter: request.counter,\n        highWaterMark: request.highWaterMark\n      };\n\n      // HTTP-network fetch step 12.1.1.3\n      const codings = headers.get('Content-Encoding');\n\n      // HTTP-network fetch step 12.1.1.4: handle content codings\n\n      // in following scenarios we ignore compression support\n      // 1. compression support is disabled\n      // 2. HEAD request\n      // 3. no Content-Encoding header\n      // 4. no content response (204)\n      // 5. content not modified response (304)\n      if (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n        response = new Response(body, responseOptions);\n        resolve(response);\n        return;\n      }\n\n      // For Node v6+\n      // Be less strict when decoding compressed responses, since sometimes\n      // servers send slightly invalid responses that are still accepted\n      // by common browsers.\n      // Always using Z_SYNC_FLUSH is what cURL does.\n      const zlibOptions = {\n        flush: zlib.Z_SYNC_FLUSH,\n        finishFlush: zlib.Z_SYNC_FLUSH\n      };\n\n      // For gzip\n      if (codings === 'gzip' || codings === 'x-gzip') {\n        body = pump(body, zlib.createGunzip(zlibOptions), error => {\n          if (error) {\n            reject(error);\n          }\n        });\n        response = new Response(body, responseOptions);\n        resolve(response);\n        return;\n      }\n\n      // For deflate\n      if (codings === 'deflate' || codings === 'x-deflate') {\n        // Handle the infamous raw deflate response from old servers\n        // a hack for old IIS and Apache servers\n        const raw = pump(response_, new PassThrough(), error => {\n          if (error) {\n            reject(error);\n          }\n        });\n        raw.once('data', chunk => {\n          // See http://stackoverflow.com/questions/37519828\n          if ((chunk[0] & 0x0F) === 0x08) {\n            body = pump(body, zlib.createInflate(), error => {\n              if (error) {\n                reject(error);\n              }\n            });\n          } else {\n            body = pump(body, zlib.createInflateRaw(), error => {\n              if (error) {\n                reject(error);\n              }\n            });\n          }\n          response = new Response(body, responseOptions);\n          resolve(response);\n        });\n        raw.once('end', () => {\n          // Some old IIS servers return zero-length OK deflate responses, so\n          // 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n          if (!response) {\n            response = new Response(body, responseOptions);\n            resolve(response);\n          }\n        });\n        return;\n      }\n\n      // For br\n      if (codings === 'br') {\n        body = pump(body, zlib.createBrotliDecompress(), error => {\n          if (error) {\n            reject(error);\n          }\n        });\n        response = new Response(body, responseOptions);\n        resolve(response);\n        return;\n      }\n\n      // Otherwise, use response as-is\n      response = new Response(body, responseOptions);\n      resolve(response);\n    });\n\n    // eslint-disable-next-line promise/prefer-await-to-then\n    writeToStream(request_, request).catch(reject);\n  });\n}\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n  const LAST_CHUNK = Buffer.from('0\\r\\n\\r\\n');\n  let isChunkedTransfer = false;\n  let properLastChunkReceived = false;\n  let previousChunk;\n  request.on('response', response => {\n    const {\n      headers\n    } = response;\n    isChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n  });\n  request.on('socket', socket => {\n    const onSocketClose = () => {\n      if (isChunkedTransfer && !properLastChunkReceived) {\n        const error = new Error('Premature close');\n        error.code = 'ERR_STREAM_PREMATURE_CLOSE';\n        errorCallback(error);\n      }\n    };\n    const onData = buf => {\n      properLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n\n      // Sometimes final 0-length chunk and end of message code are in separate packets\n      if (!properLastChunkReceived && previousChunk) {\n        properLastChunkReceived = Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;\n      }\n      previousChunk = buf;\n    };\n    socket.prependListener('close', onSocketClose);\n    socket.on('data', onData);\n    request.on('close', () => {\n      socket.removeListener('close', onSocketClose);\n      socket.removeListener('data', onData);\n    });\n  });\n}","map":{"version":3,"names":["http","https","zlib","Stream","PassThrough","pipeline","pump","Buffer","dataUriToBuffer","writeToStream","clone","Response","Headers","fromRawHeaders","Request","getNodeRequestOptions","FetchError","AbortError","isRedirect","FormData","isDomainOrSubdomain","isSameProtocol","parseReferrerPolicyFromHeader","Blob","File","fileFromSync","fileFrom","blobFromSync","blobFrom","supportedSchemas","Set","fetch","url","options_","Promise","resolve","reject","request","parsedURL","options","has","protocol","TypeError","replace","data","response","headers","typeFull","send","signal","abort","error","body","Readable","destroy","emit","aborted","abortAndFinalize","finalize","request_","toString","addEventListener","removeEventListener","on","message","fixResponseChunkedTransferBadEnding","process","version","s","endedWithEventsCount","prependListener","_eventsCount","hadError","Error","code","response_","setTimeout","rawHeaders","statusCode","location","get","locationURL","URL","redirect","counter","follow","requestOptions","agent","compress","method","size","referrer","referrerPolicy","name","delete","undefined","responseReferrerPolicy","once","responseOptions","status","statusText","statusMessage","highWaterMark","codings","zlibOptions","flush","Z_SYNC_FLUSH","finishFlush","createGunzip","raw","chunk","createInflate","createInflateRaw","createBrotliDecompress","catch","errorCallback","LAST_CHUNK","from","isChunkedTransfer","properLastChunkReceived","previousChunk","socket","onSocketClose","onData","buf","compare","slice","removeListener"],"sources":["/Users/ewang/Desktop/G36/codeclan_work/week_15/Capstone_Project_Reelax/reelax/node_modules/node-fetch/src/index.js"],"sourcesContent":["/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport http from 'node:http';\nimport https from 'node:https';\nimport zlib from 'node:zlib';\nimport Stream, {PassThrough, pipeline as pump} from 'node:stream';\nimport {Buffer} from 'node:buffer';\n\nimport dataUriToBuffer from 'data-uri-to-buffer';\n\nimport {writeToStream, clone} from './body.js';\nimport Response from './response.js';\nimport Headers, {fromRawHeaders} from './headers.js';\nimport Request, {getNodeRequestOptions} from './request.js';\nimport {FetchError} from './errors/fetch-error.js';\nimport {AbortError} from './errors/abort-error.js';\nimport {isRedirect} from './utils/is-redirect.js';\nimport {FormData} from 'formdata-polyfill/esm.min.js';\nimport {isDomainOrSubdomain, isSameProtocol} from './utils/is.js';\nimport {parseReferrerPolicyFromHeader} from './utils/referrer.js';\nimport {\n\tBlob,\n\tFile,\n\tfileFromSync,\n\tfileFrom,\n\tblobFromSync,\n\tblobFrom\n} from 'fetch-blob/from.js';\n\nexport {FormData, Headers, Request, Response, FetchError, AbortError, isRedirect};\nexport {Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom};\n\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nexport default async function fetch(url, options_) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Build request object\n\t\tconst request = new Request(url, options_);\n\t\tconst {parsedURL, options} = getNodeRequestOptions(request);\n\t\tif (!supportedSchemas.has(parsedURL.protocol)) {\n\t\t\tthrow new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, '')}\" is not supported.`);\n\t\t}\n\n\t\tif (parsedURL.protocol === 'data:') {\n\t\t\tconst data = dataUriToBuffer(request.url);\n\t\t\tconst response = new Response(data, {headers: {'Content-Type': data.typeFull}});\n\t\t\tresolve(response);\n\t\t\treturn;\n\t\t}\n\n\t\t// Wrap http.request into fetch\n\t\tconst send = (parsedURL.protocol === 'https:' ? https : http).request;\n\t\tconst {signal} = request;\n\t\tlet response = null;\n\n\t\tconst abort = () => {\n\t\t\tconst error = new AbortError('The operation was aborted.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\trequest.body.destroy(error);\n\t\t\t}\n\n\t\t\tif (!response || !response.body) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = () => {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// Send request\n\t\tconst request_ = send(parsedURL.toString(), options);\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tconst finalize = () => {\n\t\t\trequest_.abort();\n\t\t\tif (signal) {\n\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t}\n\t\t};\n\n\t\trequest_.on('error', error => {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(request_, error => {\n\t\t\tif (response && response.body) {\n\t\t\t\tresponse.body.destroy(error);\n\t\t\t}\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (process.version < 'v14') {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\trequest_.on('socket', s => {\n\t\t\t\tlet endedWithEventsCount;\n\t\t\t\ts.prependListener('end', () => {\n\t\t\t\t\tendedWithEventsCount = s._eventsCount;\n\t\t\t\t});\n\t\t\t\ts.prependListener('close', hadError => {\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && endedWithEventsCount < s._eventsCount && !hadError) {\n\t\t\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\trequest_.on('response', response_ => {\n\t\t\trequest_.setTimeout(0);\n\t\t\tconst headers = fromRawHeaders(response_.rawHeaders);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (isRedirect(response_.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tlet locationURL = null;\n\t\t\t\ttry {\n\t\t\t\t\tlocationURL = location === null ? null : new URL(location, request.url);\n\t\t\t\t} catch {\n\t\t\t\t\t// error here can only be invalid URL in Location: header\n\t\t\t\t\t// do not throw when options.redirect == manual\n\t\t\t\t\t// let the user extract the errorneous redirect URL\n\t\t\t\t\tif (request.redirect !== 'manual') {\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// Nothing to do\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow': {\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: clone(request),\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\tsize: request.size,\n\t\t\t\t\t\t\treferrer: request.referrer,\n\t\t\t\t\t\t\treferrerPolicy: request.referrerPolicy\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// when forwarding sensitive headers like \"Authorization\",\n\t\t\t\t\t\t// \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n\t\t\t\t\t\t// headers will be ignored when following a redirect to a domain\n\t\t\t\t\t\t// that is not a subdomain match or exact match of the initial domain.\n\t\t\t\t\t\t// For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n\t\t\t\t\t\t// will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n\t\t\t\t\t\t// headers will also be ignored when following a redirect to a domain using\n\t\t\t\t\t\t// a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n\t\t\t\t\t\t// will not forward the sensitive headers\n\t\t\t\t\t\tif (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n\t\t\t\t\t\t\t\trequestOptions.headers.delete(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {\n\t\t\t\t\t\t\trequestOptions.method = 'GET';\n\t\t\t\t\t\t\trequestOptions.body = undefined;\n\t\t\t\t\t\t\trequestOptions.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 14\n\t\t\t\t\t\tconst responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n\t\t\t\t\t\tif (responseReferrerPolicy) {\n\t\t\t\t\t\t\trequestOptions.referrerPolicy = responseReferrerPolicy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOptions)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prepare response\n\t\t\tif (signal) {\n\t\t\t\tresponse_.once('end', () => {\n\t\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet body = pump(response_, new PassThrough(), error => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// see https://github.com/nodejs/node/pull/29376\n\t\t\t/* c8 ignore next 3 */\n\t\t\tif (process.version < 'v12.10') {\n\t\t\t\tresponse_.on('aborted', abortAndFinalize);\n\t\t\t}\n\n\t\t\tconst responseOptions = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: response_.statusCode,\n\t\t\t\tstatusText: response_.statusMessage,\n\t\t\t\theaders,\n\t\t\t\tsize: request.size,\n\t\t\t\tcounter: request.counter,\n\t\t\t\thighWaterMark: request.highWaterMark\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// For gzip\n\t\t\tif (codings === 'gzip' || codings === 'x-gzip') {\n\t\t\t\tbody = pump(body, zlib.createGunzip(zlibOptions), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For deflate\n\t\t\tif (codings === 'deflate' || codings === 'x-deflate') {\n\t\t\t\t// Handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = pump(response_, new PassThrough(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\traw.once('data', chunk => {\n\t\t\t\t\t// See http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflate(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflateRaw(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\traw.once('end', () => {\n\t\t\t\t\t// Some old IIS servers return zero-length OK deflate responses, so\n\t\t\t\t\t// 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n\t\t\t\t\tif (!response) {\n\t\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For br\n\t\t\tif (codings === 'br') {\n\t\t\t\tbody = pump(body, zlib.createBrotliDecompress(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise, use response as-is\n\t\t\tresponse = new Response(body, responseOptions);\n\t\t\tresolve(response);\n\t\t});\n\n\t\t// eslint-disable-next-line promise/prefer-await-to-then\n\t\twriteToStream(request_, request).catch(reject);\n\t});\n}\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tconst LAST_CHUNK = Buffer.from('0\\r\\n\\r\\n');\n\n\tlet isChunkedTransfer = false;\n\tlet properLastChunkReceived = false;\n\tlet previousChunk;\n\n\trequest.on('response', response => {\n\t\tconst {headers} = response;\n\t\tisChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n\t});\n\n\trequest.on('socket', socket => {\n\t\tconst onSocketClose = () => {\n\t\t\tif (isChunkedTransfer && !properLastChunkReceived) {\n\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\terrorCallback(error);\n\t\t\t}\n\t\t};\n\n\t\tconst onData = buf => {\n\t\t\tproperLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n\n\t\t\t// Sometimes final 0-length chunk and end of message code are in separate packets\n\t\t\tif (!properLastChunkReceived && previousChunk) {\n\t\t\t\tproperLastChunkReceived = (\n\t\t\t\t\tBuffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&\n\t\t\t\t\tBuffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpreviousChunk = buf;\n\t\t};\n\n\t\tsocket.prependListener('close', onSocketClose);\n\t\tsocket.on('data', onData);\n\n\t\trequest.on('close', () => {\n\t\t\tsocket.removeListener('close', onSocketClose);\n\t\t\tsocket.removeListener('data', onData);\n\t\t});\n\t});\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}